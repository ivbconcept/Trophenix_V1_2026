import { supabaseDB2 as supabase } from '../lib/supabaseDB2';
import type { ActiveContext } from '../types/contexts';

export interface EleaContextSummary {
  has_context: boolean;
  context_type?: string;
  role?: string;
  organization?: {
    name: string;
    slug: string;
    team_size: number;
    active_tasks: number;
    my_tasks: number;
  };
  delegation?: {
    athlete_profile_id: string;
    athlete_name: string;
    my_role: string;
    delegates_count: number;
    active_tasks: number;
  };
  message?: string;
}

export class ContextAwareEleaService {
  static async getContextSummary(userId: string): Promise<EleaContextSummary> {
    const { data, error } = await supabase.rpc('get_elea_context_summary', {
      target_user_id: userId
    });

    if (error) {
      console.error('Error getting context summary:', error);
      return { has_context: false, message: 'Erreur lors de la r√©cup√©ration du contexte' };
    }

    return data as EleaContextSummary;
  }

  static async getOrCreateContextAwareSession(
    userId: string,
    agentId: string,
    currentContext: ActiveContext | null
  ): Promise<string> {
    const { data: existingSession, error: fetchError } = await supabase
      .from('agent_sessions')
      .select('id')
      .eq('user_id', userId)
      .eq('agent_id', agentId)
      .eq('status', 'active')
      .order('last_message_at', { ascending: false })
      .limit(1)
      .maybeSingle();

    if (fetchError) {
      console.error('Error fetching session:', fetchError);
      throw fetchError;
    }

    if (existingSession) {
      const updateData: any = {
        last_message_at: new Date().toISOString()
      };

      if (currentContext) {
        updateData.current_context_id = currentContext.context.id;
        updateData.active_role = currentContext.context.role;
        updateData.context_data = {
          context_type: currentContext.context.context_type,
          role: currentContext.context.role,
          permissions: currentContext.permissions,
          organization: currentContext.organization,
          delegation: currentContext.delegation
        };
      }

      await supabase
        .from('agent_sessions')
        .update(updateData)
        .eq('id', existingSession.id);

      return existingSession.id;
    }

    const insertData: any = {
      user_id: userId,
      agent_id: agentId,
      title: 'Nouvelle conversation',
      status: 'active'
    };

    if (currentContext) {
      insertData.current_context_id = currentContext.context.id;
      insertData.active_role = currentContext.context.role;
      insertData.context_data = {
        context_type: currentContext.context.context_type,
        role: currentContext.context.role,
        permissions: currentContext.permissions,
        organization: currentContext.organization,
        delegation: currentContext.delegation
      };
    }

    const { data: newSession, error: createError } = await supabase
      .from('agent_sessions')
      .insert(insertData)
      .select('id')
      .single();

    if (createError) {
      console.error('Error creating session:', createError);
      throw createError;
    }

    return newSession.id;
  }

  static async getSessionMessages(sessionId: string) {
    const { data, error } = await supabase
      .from('agent_messages')
      .select('*')
      .eq('session_id', sessionId)
      .eq('is_deleted', false)
      .order('created_at', { ascending: true });

    if (error) {
      console.error('Error fetching messages:', error);
      throw error;
    }

    return data || [];
  }

  static async sendMessage(
    sessionId: string,
    senderId: string,
    content: string,
    senderType: 'user' | 'agent' = 'user'
  ) {
    const { data, error } = await supabase
      .from('agent_messages')
      .insert({
        session_id: sessionId,
        sender_type: senderType,
        sender_id: senderId,
        content,
        content_type: 'text'
      })
      .select()
      .single();

    if (error) {
      console.error('Error sending message:', error);
      throw error;
    }

    return data;
  }

  static getContextAwareWelcome(
    userId: string,
    contextSummary: EleaContextSummary,
    userEmail?: string
  ): string {
    if (!contextSummary.has_context) {
      return `Bonjour ! Je suis Elea, votre assistante IA personnelle sur Trophenix. Je m'adapte √† votre r√¥le et votre contexte pour vous aider au mieux. Comment puis-je vous assister aujourd'hui ?`;
    }

    const userName = userEmail?.split('@')[0] || 'cher utilisateur';

    if (contextSummary.context_type === 'company_org' && contextSummary.organization) {
      const org = contextSummary.organization;
      const roleLabel = this.getRoleLabel(contextSummary.role || '');

      return `Bonjour ${userName} !

Je suis Elea, votre assistante IA personnelle. Je vois que vous √™tes **${roleLabel}** chez **${org.name}**.

üìä Contexte actuel :
- √âquipe : ${org.team_size} membre${org.team_size > 1 ? 's' : ''}
- T√¢ches actives : ${org.active_tasks}
- Vos t√¢ches : ${org.my_tasks}

Je peux vous aider √† :
‚úÖ G√©rer les t√¢ches de l'√©quipe
‚úÖ Consulter les candidatures
‚úÖ Communiquer avec les candidats
‚úÖ Poster des offres d'emploi
‚úÖ Analyser les performances de l'√©quipe

Comment puis-je vous assister ?`;
    }

    if (contextSummary.context_type === 'athlete_delegation' && contextSummary.delegation) {
      const del = contextSummary.delegation;
      const roleLabel = this.getRoleLabel(del.my_role);

      return `Bonjour ${userName} !

Je suis Elea, votre assistante IA personnelle. Je vois que vous √™tes **${roleLabel}** pour **${del.athlete_name}**.

üìä Contexte actuel :
- D√©l√©gu√©s actifs : ${del.delegates_count}
- T√¢ches en cours : ${del.active_tasks}

Je peux vous aider √† :
‚úÖ G√©rer les t√¢ches et d√©cisions importantes
‚úÖ Suivre les candidatures de l'athl√®te
‚úÖ Communiquer avec les recruteurs
‚úÖ Coordonner avec les autres d√©l√©gu√©s

Comment puis-je vous aider aujourd'hui ?`;
    }

    if (contextSummary.context_type === 'athlete_profile') {
      return `Bonjour ${userName} !

Je suis Elea, votre assistante IA personnelle. Je suis l√† pour vous aider dans votre parcours sportif et professionnel.

Je peux vous aider √† :
‚úÖ Optimiser votre profil athl√®te
‚úÖ Trouver des opportunit√©s
‚úÖ G√©rer vos candidatures
‚úÖ Pr√©parer vos entretiens

Que puis-je faire pour vous ?`;
    }

    return `Bonjour ${userName} ! Je suis Elea, votre assistante personnelle. Comment puis-je vous aider ?`;
  }

  static getContextAwareSuggestions(contextSummary: EleaContextSummary): Array<{ id: string; text: string }> {
    if (!contextSummary.has_context) {
      return [
        { id: '1', text: 'Comment fonctionne Trophenix ?' },
        { id: '2', text: 'G√©rer mon profil' }
      ];
    }

    if (contextSummary.context_type === 'company_org') {
      const myTasks = contextSummary.organization?.my_tasks || 0;
      const suggestions = [
        { id: '1', text: 'Voir les candidatures re√ßues' },
        { id: '2', text: 'Cr√©er une nouvelle offre' },
        { id: '3', text: 'Consulter l\'√©quipe' }
      ];

      if (myTasks > 0) {
        suggestions.unshift({
          id: '0',
          text: `Voir mes ${myTasks} t√¢che${myTasks > 1 ? 's' : ''} en cours`
        });
      }

      return suggestions;
    }

    if (contextSummary.context_type === 'athlete_delegation') {
      const tasks = contextSummary.delegation?.active_tasks || 0;
      const suggestions = [
        { id: '1', text: 'Voir les candidatures de l\'athl√®te' },
        { id: '2', text: 'Consulter les autres d√©l√©gu√©s' }
      ];

      if (tasks > 0) {
        suggestions.unshift({
          id: '0',
          text: `Voir les ${tasks} t√¢che${tasks > 1 ? 's' : ''} en cours`
        });
      }

      return suggestions;
    }

    if (contextSummary.context_type === 'athlete_profile') {
      return [
        { id: '1', text: 'Optimiser mon profil' },
        { id: '2', text: 'Voir les offres disponibles' },
        { id: '3', text: 'G√©rer mes candidatures' },
        { id: '4', text: 'Inviter un d√©l√©gu√© (parent/agent)' }
      ];
    }

    return [
      { id: '1', text: 'Que puis-je faire ici ?' },
      { id: '2', text: 'Aide' }
    ];
  }

  static async generateContextAwareResponse(
    userMessage: string,
    userId: string,
    contextSummary: EleaContextSummary,
    conversationHistory: any[]
  ): Promise<string> {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('t√¢che') || lowerMessage.includes('task')) {
      if (contextSummary.context_type === 'company_org') {
        const myTasks = contextSummary.organization?.my_tasks || 0;
        const totalTasks = contextSummary.organization?.active_tasks || 0;

        return `üìã **T√¢ches dans votre organisation**

Vous avez **${myTasks} t√¢che${myTasks > 1 ? 's' : ''}** qui vous sont assign√©es.
L'√©quipe a **${totalTasks} t√¢che${totalTasks > 1 ? 's' : ''}** actives au total.

Que souhaitez-vous faire ?
- Voir vos t√¢ches assign√©es
- Cr√©er une nouvelle t√¢che
- Consulter toutes les t√¢ches de l'√©quipe`;
      }

      if (contextSummary.context_type === 'athlete_delegation') {
        const tasks = contextSummary.delegation?.active_tasks || 0;

        return `üìã **T√¢ches partag√©es**

Il y a **${tasks} t√¢che${tasks > 1 ? 's' : ''}** en cours pour ${contextSummary.delegation?.athlete_name}.

Ces t√¢ches sont visibles par tous les d√©l√©gu√©s (parents, agents) pour une coordination optimale.

Souhaitez-vous consulter ces t√¢ches ?`;
      }
    }

    if (lowerMessage.includes('√©quipe') || lowerMessage.includes('team') || lowerMessage.includes('membre')) {
      if (contextSummary.context_type === 'company_org') {
        const teamSize = contextSummary.organization?.team_size || 0;

        return `üë• **Votre √©quipe ${contextSummary.organization?.name}**

Vous avez **${teamSize} membre${teamSize > 1 ? 's' : ''}** dans votre organisation.

En tant que **${this.getRoleLabel(contextSummary.role || '')}**, vous pouvez :
${this.getTeamPermissions(contextSummary.role || '')}

Que souhaitez-vous faire ?`;
      }

      if (contextSummary.context_type === 'athlete_delegation') {
        const delegates = contextSummary.delegation?.delegates_count || 0;

        return `üë• **D√©l√©gu√©s de ${contextSummary.delegation?.athlete_name}**

Il y a **${delegates} d√©l√©gu√©${delegates > 1 ? 's' : ''}** actifs (parents, agents, managers).

Tous les d√©l√©gu√©s peuvent :
- Voir les candidatures et offres
- Consulter les messages avec les recruteurs
- Collaborer sur les d√©cisions importantes

La transparence totale est garantie !

Souhaitez-vous voir la liste des d√©l√©gu√©s ?`;
      }
    }

    if (lowerMessage.includes('candidature') || lowerMessage.includes('application')) {
      if (contextSummary.context_type === 'company_org') {
        return `üì® **Gestion des candidatures**

En tant que membre de l'√©quipe ${contextSummary.organization?.name}, vous pouvez consulter et g√©rer les candidatures re√ßues.

Vos permissions d√©pendent de votre r√¥le (${this.getRoleLabel(contextSummary.role || '')}).

Que souhaitez-vous faire ?
- Voir toutes les candidatures
- Filtrer par offre
- Consulter les nouveaux profils`;
      }

      if (contextSummary.context_type === 'athlete_delegation') {
        return `üì® **Candidatures de ${contextSummary.delegation?.athlete_name}**

En tant que **${this.getRoleLabel(contextSummary.delegation?.my_role || '')}**, vous pouvez suivre toutes les candidatures envoy√©es.

Tous les d√©l√©gu√©s (parents, agents) ont acc√®s aux m√™mes informations pour prendre les meilleures d√©cisions ensemble.

Souhaitez-vous voir les candidatures en cours ?`;
      }

      if (contextSummary.context_type === 'athlete_profile') {
        return `üì® **Vos candidatures**

Je peux vous aider √† :
- Voir vos candidatures en cours
- Postuler √† de nouvelles offres
- Pr√©parer vos candidatures
- Suivre les r√©ponses des recruteurs

Que souhaitez-vous faire ?`;
      }
    }

    if (lowerMessage.includes('message') || lowerMessage.includes('messagerie')) {
      if (contextSummary.context_type === 'company_org' || contextSummary.context_type === 'athlete_delegation') {
        return `üí¨ **Messagerie contextuelle**

Vos messages sont maintenant **partag√©s avec votre √©quipe** !

‚úÖ **Avantages** :
- Toute l'√©quipe voit les √©changes avec les candidats
- Pas de perte d'information si quelqu'un part
- Collaboration transparente
- Historique complet conserv√©

Les messages directs personnels restent priv√©s.

Souhaitez-vous acc√©der √† la messagerie ?`;
      }
    }

    if (lowerMessage.includes('r√¥le') || lowerMessage.includes('permission') || lowerMessage.includes('droits')) {
      return `üîê **Votre r√¥le et permissions**

Contexte : **${this.getContextTypeLabel(contextSummary.context_type || '')}**
R√¥le : **${this.getRoleLabel(contextSummary.role || '')}**

${this.getPermissionsDescription(contextSummary)}

Vos permissions sont automatiquement appliqu√©es partout sur la plateforme.

Des questions sur ce que vous pouvez faire ?`;
    }

    if (lowerMessage.includes('aide') || lowerMessage.includes('help')) {
      return `ü§ñ **Je suis Elea - Votre assistante IA consciente du contexte**

Je m'adapte automatiquement √† votre r√¥le actuel sur Trophenix :

‚ú® **Ce que je sais sur vous** :
- Votre contexte actuel : ${this.getContextTypeLabel(contextSummary.context_type || '')}
- Votre r√¥le : ${this.getRoleLabel(contextSummary.role || '')}
- Vos permissions et acc√®s
- Votre √©quipe/d√©l√©gation
- Vos t√¢ches et responsabilit√©s

‚ú® **Ce que je peux faire** :
- R√©pondre √† vos questions contextuelles
- Vous guider selon votre r√¥le
- Vous donner acc√®s aux bonnes fonctionnalit√©s
- Vous aider dans vos t√¢ches quotidiennes

N'h√©sitez pas √† me poser des questions !`;
    }

    return `Je comprends votre question sur "${userMessage}".

Dans votre contexte actuel (${this.getRoleLabel(contextSummary.role || '')} - ${this.getContextTypeLabel(contextSummary.context_type || '')}), je peux vous aider avec :

${this.getContextSpecificHelp(contextSummary)}

Que souhaitez-vous faire ?`;
  }

  private static getRoleLabel(role: string): string {
    const labels: Record<string, string> = {
      owner: 'Propri√©taire',
      hr_manager: 'Manager RH',
      hr_recruiter: 'Recruteur RH',
      technical_lead: 'Lead Technique',
      director: 'Directeur',
      guardian: 'Tuteur L√©gal',
      agent: 'Agent Sportif',
      manager: 'Manager',
      coach: 'Coach'
    };
    return labels[role] || role;
  }

  private static getContextTypeLabel(contextType: string): string {
    const labels: Record<string, string> = {
      company_org: 'Organisation Entreprise',
      athlete_delegation: 'D√©l√©gation Athl√®te',
      athlete_profile: 'Profil Athl√®te',
      platform_admin: 'Administration Plateforme'
    };
    return labels[contextType] || contextType;
  }

  private static getTeamPermissions(role: string): string {
    const permissions: Record<string, string> = {
      owner: '- G√©rer toute l\'√©quipe\n- Inviter/retirer des membres\n- Tous les droits sur les offres\n- Acc√®s complet',
      hr_manager: '- Inviter de nouveaux membres\n- Poster et g√©rer les offres\n- G√©rer les candidatures\n- Voir les analytics',
      hr_recruiter: '- Consulter les candidatures\n- Voir les offres',
      technical_lead: '- √âvaluer les comp√©tences techniques\n- Voir les candidatures',
      director: '- Validation finale\n- Vue d\'ensemble et analytics'
    };
    return permissions[role] || '- Acc√®s limit√© selon votre r√¥le';
  }

  private static getPermissionsDescription(contextSummary: EleaContextSummary): string {
    if (contextSummary.context_type === 'company_org') {
      return this.getTeamPermissions(contextSummary.role || '');
    }

    if (contextSummary.context_type === 'athlete_delegation') {
      const role = contextSummary.delegation?.my_role || '';
      const permissions: Record<string, string> = {
        guardian: 'En tant que tuteur l√©gal, vous avez tous les droits :\n- Valider les documents l√©gaux\n- Signer les contrats\n- G√©rer le profil\n- Prendre toutes les d√©cisions',
        agent: 'En tant qu\'agent sportif :\n- N√©gocier les contrats\n- Conseiller sur les offres\n- Voir toutes les opportunit√©s\n- Communiquer avec les recruteurs',
        manager: 'En tant que manager :\n- G√©rer la carri√®re\n- Voir les statistiques\n- Conseiller sur les choix',
        coach: 'En tant que coach :\n- Voir les performances\n- Donner du feedback\n- Suivre la progression'
      };
      return permissions[role] || 'Acc√®s selon votre r√¥le';
    }

    return 'Permissions standard selon votre r√¥le';
  }

  private static getContextSpecificHelp(contextSummary: EleaContextSummary): string {
    if (contextSummary.context_type === 'company_org') {
      return `- G√©rer les offres d'emploi
- Consulter les candidatures
- G√©rer votre √©quipe
- Suivre les t√¢ches actives
- Analyser les performances`;
    }

    if (contextSummary.context_type === 'athlete_delegation') {
      return `- Suivre les candidatures de l'athl√®te
- G√©rer les t√¢ches importantes
- Coordonner avec les autres d√©l√©gu√©s
- Communiquer avec les recruteurs`;
    }

    if (contextSummary.context_type === 'athlete_profile') {
      return `- Optimiser votre profil
- Trouver des opportunit√©s
- Postuler aux offres
- G√©rer vos candidatures`;
    }

    return '- Navigation sur la plateforme\n- Gestion de votre profil\n- Exploration des fonctionnalit√©s';
  }
}
