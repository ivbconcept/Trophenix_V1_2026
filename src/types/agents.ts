/**
 * Types pour le Syst√®me Multi-Agents
 *
 * ‚ö†Ô∏è ARCHITECTURE SCALABLE MULTI-AGENTS ‚ö†Ô∏è
 *
 * Ce fichier d√©finit l'architecture permettant d'avoir PLUSIEURS agents
 * qui peuvent collaborer entre eux.
 *
 * Sc√©narios d'usage :
 * - Agent Elea (assistant g√©n√©ral)
 * - Agent RecruiterBot (recommandations de profils)
 * - Agent CareerAdvisor (conseils carri√®re)
 * - Agents qui se passent le relais selon le contexte
 *
 * @module types/agents
 */

/**
 * Types d'agents disponibles dans le syst√®me
 *
 * üîÑ POUR AJOUTER UN NOUVEL AGENT :
 * 1. Ajouter son type ici
 * 2. Cr√©er sa config dans src/config/agents.ts
 * 3. Impl√©menter son service dans src/services/agents/
 * 4. Cr√©er son composant UI si besoin
 */
export type AgentType = 'elea' | 'recruiter' | 'career_advisor' | 'admin_assistant';

/**
 * R√¥les qu'un agent peut avoir
 */
export type AgentRole =
  | 'general_assistant'      // Assistant g√©n√©raliste
  | 'onboarding_guide'       // Guide d'inscription
  | 'recruiter'              // Recruteur IA
  | 'career_advisor'         // Conseiller carri√®re
  | 'technical_support'      // Support technique
  | 'admin_helper';          // Assistant admin

/**
 * Statut d'un agent
 */
export type AgentStatus = 'idle' | 'listening' | 'thinking' | 'responding' | 'offline';

/**
 * Message dans le syst√®me multi-agents
 */
export interface AgentMessage {
  /** ID unique du message */
  id: string;
  /** Contenu du message */
  content: string;
  /** Exp√©diteur (user ou agent) */
  sender: 'user' | AgentType;
  /** Horodatage */
  timestamp: Date;
  /** Type de message */
  type?: 'text' | 'suggestion' | 'help' | 'error' | 'handoff';
  /** M√©tadonn√©es optionnelles */
  metadata?: {
    /** Confiance dans la r√©ponse (0-1) */
    confidence?: number;
    /** Sources utilis√©es */
    sources?: string[];
    /** Agent suivant √† solliciter */
    handoffTo?: AgentType;
    /** Raison du transfert */
    handoffReason?: string;
  };
}

/**
 * Contexte partag√© entre tous les agents
 */
export interface AgentContext {
  /** Page actuelle */
  page: string;
  /** √âtape actuelle */
  step?: number;
  /** Type d'utilisateur */
  userType?: 'athlete' | 'company' | 'admin';
  /** Donn√©es du formulaire */
  formData?: Record<string, any>;
  /** ID de l'utilisateur */
  userId?: string;
  /** Agent actif actuellement */
  activeAgent?: AgentType;
  /** Historique de conversation */
  conversationHistory?: AgentMessage[];
  /** Session ID pour la m√©moire conversationnelle */
  sessionId?: string;
}

/**
 * Configuration d'un agent individuel
 */
export interface AgentConfig {
  /** Type de l'agent */
  type: AgentType;
  /** Nom affich√© */
  name: string;
  /** R√¥le de l'agent */
  role: AgentRole;
  /** Avatar/emoji */
  avatar: string;
  /** Description courte */
  description: string;
  /** Si l'agent est activ√© */
  enabled: boolean;
  /** Endpoint API sp√©cifique √† cet agent */
  apiEndpoint?: string;
  /** Capacit√©s de l'agent */
  capabilities: string[];
  /** Priorit√© (pour choisir quel agent r√©pond) */
  priority: number;
  /** Peut transf√©rer vers d'autres agents */
  canHandoff: boolean;
  /** Agents vers lesquels il peut transf√©rer */
  handoffTargets?: AgentType[];
}

/**
 * Suggestion propos√©e par un agent
 */
export interface AgentSuggestion {
  /** ID unique */
  id: string;
  /** Texte de la suggestion */
  text: string;
  /** Agent qui a g√©n√©r√© la suggestion */
  sourceAgent: AgentType;
  /** Action √† ex√©cuter */
  action?: () => void;
  /** Type de suggestion */
  type?: 'question' | 'action' | 'navigation';
}

/**
 * R√©ponse de l'API d'un agent
 */
export interface AgentAPIResponse {
  /** R√©ponse textuelle */
  response: string;
  /** Agent qui a r√©pondu */
  agent: AgentType;
  /** Suggestions associ√©es */
  suggestions?: AgentSuggestion[];
  /** Confiance dans la r√©ponse */
  confidence?: number;
  /** Doit-on transf√©rer √† un autre agent ? */
  shouldHandoff?: boolean;
  /** Agent cible du transfert */
  handoffTarget?: AgentType;
  /** Raison du transfert */
  handoffReason?: string;
}

/**
 * Requ√™te vers l'API d'un agent
 */
export interface AgentAPIRequest {
  /** Message de l'utilisateur */
  message: string;
  /** Contexte actuel */
  context: AgentContext;
  /** Agent cibl√© (optionnel, sinon routage automatique) */
  targetAgent?: AgentType;
  /** Historique de conversation */
  history?: AgentMessage[];
}

/**
 * √âv√©nement dans le syst√®me multi-agents
 *
 * Permet aux agents de communiquer entre eux
 */
export interface AgentEvent {
  /** Type d'√©v√©nement */
  type: 'message' | 'handoff' | 'context_update' | 'agent_status_change';
  /** Agent source */
  sourceAgent: AgentType;
  /** Agent cible (optionnel) */
  targetAgent?: AgentType;
  /** Donn√©es de l'√©v√©nement */
  payload: any;
  /** Timestamp */
  timestamp: Date;
}

/**
 * √âtat du syst√®me multi-agents
 */
export interface AgentSystemState {
  /** Agent actuellement actif */
  activeAgent: AgentType;
  /** Agents disponibles */
  availableAgents: AgentType[];
  /** Statut de chaque agent */
  agentStatuses: Record<AgentType, AgentStatus>;
  /** File d'attente d'√©v√©nements */
  eventQueue: AgentEvent[];
  /** Contexte global */
  context: AgentContext;
}

/**
 * Orchestrateur de transfert entre agents
 */
export interface AgentHandoffDecision {
  /** Doit-on transf√©rer ? */
  shouldHandoff: boolean;
  /** Agent cible */
  targetAgent?: AgentType;
  /** Raison du transfert */
  reason?: string;
  /** Message de transition pour l'utilisateur */
  transitionMessage?: string;
}

/**
 * M√©triques d'un agent (pour monitoring)
 */
export interface AgentMetrics {
  /** Agent concern√© */
  agent: AgentType;
  /** Nombre de messages trait√©s */
  messagesProcessed: number;
  /** Temps de r√©ponse moyen (ms) */
  averageResponseTime: number;
  /** Score de satisfaction */
  satisfactionScore?: number;
  /** Nombre de transferts effectu√©s */
  handoffsInitiated: number;
  /** Nombre de transferts re√ßus */
  handoffsReceived: number;
  /** Taux de r√©ussite */
  successRate: number;
}
